version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: emotional_ai_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-emotional_ai}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./config/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - emotional_ai_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Primary Server (M3-Primary)
  m3-primary:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: emotional_ai_m3_primary
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE:-emotional_ai}?authSource=admin
      - SERVER_ROLE=primary
      - SERVER_ID=m3-primary
      - CLUSTER_ENABLED=true
      - GPU_ENABLED=false
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config
      - ./concept:/app/concept
      - ./personas:/app/personas
      - ./modules:/app/modules
      - ./backend:/app/backend
      - ./frontend:/app/frontend
    networks:
      - emotional_ai_network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GPU Server (M3-GPU)
  m3-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: emotional_ai_m3_gpu
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://admin:emotional_ai_password@mongodb:27017/emotional_ai?authSource=admin
      - SERVER_ROLE=gpu_worker
      - SERVER_ID=m3-gpu
      - CLUSTER_ENABLED=true
      - GPU_ENABLED=true
      - PORT=8001
    ports:
      - "8001:8001"
    volumes:
      - ./config:/app/config
      - ./concept:/app/concept
      - ./personas:/app/personas
      - ./modules:/app/modules
      - ./backend:/app/backend
      - ./frontend:/app/frontend
    networks:
      - emotional_ai_network
    depends_on:
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: emotional_ai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - emotional_ai_network
    depends_on:
      - m3-primary
      - m3-gpu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for WebSocket clustering
  redis:
    image: redis:7-alpine
    container_name: emotional_ai_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - emotional_ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: emotional_ai_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - emotional_ai_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: emotional_ai_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=emotional_ai_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - emotional_ai_network
    depends_on:
      - prometheus

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  emotional_ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 